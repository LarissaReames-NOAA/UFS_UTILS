70a71,72
>  type(esmf_field), public           :: lai_target_grid
>                                        ! leaf area index
98a101,105
>  type(esmf_field)                   :: terrain_from_input_grid_land
>                                        ! terrain height interpolated
>                                        ! from input grid at all land points   
>                                                                                                                 
> 
123c130
<                                        convert_nst
---
>                                        convert_nst, input_type
154a162,167
>  
> !-----------------------------------------------------------------------
> ! Adjust soil levels of input grid !! not implemented yet
> !-----------------------------------------------------------------------
> 
>  call adjust_soil_levels(localpet)
172a186,191
>  
> !---------------------------------------------------------------------------------------------
> ! Check for points where smois is too high to be a land point at a land point
> !---------------------------------------------------------------------------------------------
> 
> call check_smois_water
186a206,212
>  ! Check soil moisture again for mismatches after rescale_soil_moisture
>  ! subroutine
>  call check_smois_land
>  if (localpet==0) PRINT *, "CALLING SUBROUTINE REPLACE_LAND_SFCPARAMS AFTER & 
>   RESCALE_SOIL_MOISTURE."
>  call replace_land_sfcparams(localpet)
> 
223c249,253
<  call write_fv3_sfc_data_netcdf(localpet)
---
>  if(trim(input_type) == "grib2" .or. trim(input_type) == "wrf") then
>    call write_fv3_sfc_grib2data_netcdf(localpet)
>  else
>    call write_fv3_sfc_data_netcdf(localpet)
>  endif
246c276
< 
---
>  
285c315,320
<                                        veg_type_landice_input
---
>                                        veg_type_landice_input, &
>                                        veg_greenness_input_grid, &
>                                        max_veg_greenness_input_grid, &
>                                        min_veg_greenness_input_grid, &
>                                        lai_input_grid
>              
289d323
<                                        i_input, j_input, & !LJR
294c328,329
<                                        latitude_target_grid
---
>                                        latitude_target_grid, &
>                                        input_grid_type, i_input, j_input
296,299c331,337
<  use program_setup, only             : convert_nst, input_type
< 
<  use static_data, only               : veg_type_target_grid, &
<                                        soil_type_target_grid
---
>  use program_setup, only             : convert_nst, replace_vgtyp, replace_sotyp, &
>                                        replace_vgfrc,tg3_from_soil,internal_GSD, &
>                                        interp_lai
> 
>  use static_data, only               : veg_type_target_grid, soil_type_target_grid, &
>                                        veg_greenness_target_grid, substrate_temp_target_grid,&
>                                        min_veg_greenness_target_grid,max_veg_greenness_target_grid
323d360
<  real(esmf_kind_r8), allocatable    :: data_one_tile_input(:,:) !LJR
326a364
>  real(esmf_kind_r8), allocatable    :: data_one_tile_input(:,:)
360a399,401
>  real(esmf_kind_r8), pointer        :: veg_greenness_target_ptr(:,:)
>  real(esmf_kind_r8), pointer        :: min_veg_greenness_target_ptr(:,:)
>  real(esmf_kind_r8), pointer        :: max_veg_greenness_target_ptr(:,:)
361a403
>   real(esmf_kind_r8), pointer       :: lai_target_ptr(:,:)
371a414
>  
373c416
< ! Interpolate fieids that do not require 'masked' interpolation.
---
> ! Interpolate fields that do not require 'masked' interpolation.
465,466d507
< ! Next, determine the sea ice fraction on target grid. 
< !
491,492c532,537
< 
<  mask_target_ptr = seamask_target_ptr
---
>     
>  print*,"- CALL FieldGet FOR TARGET GRID LANDMASK."
>  call ESMF_FieldGet(landmask_target_grid, &
>                     farrayPtr=landmask_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)   
513,522c558,559
< 
<  mask_input_ptr = 1
<  where (nint(landmask_input_ptr) == 1) mask_input_ptr = 0
<  print*, "Num input landmask == 0,1,2 : ", count(landmask_input_ptr == 0), count(landmask_input_ptr == 1), count(landmask_input_ptr == 2)
<  print*, "Num target seamask == 0,1,2 : ", count(seamask_target_ptr == 0), count(seamask_target_ptr == 1), count(seamask_target_ptr == 2)
< !-----------------------------------------------------------------------
< ! Interpolate.
< !-----------------------------------------------------------------------
< 
<  if (localpet == 0) then
---
>     
>   if (localpet == 0) then
524,525d560
<    allocate(data_one_tile_input(i_input,j_input))
<    allocate(data_one_tile2(i_target,j_target))
527a563
>    allocate(data_one_tile_input(i_input,j_input))
530,531d565
<    allocate(data_one_tile_input(0,0))
<    allocate(data_one_tile2(0,0))
534a569,723
>     
>  !-----------------------------------------------------------------------
>  ! Interpolate vegetation type to target grid if chosen in namelist and terrain
>  ! for use in replacing isolated bad terrain values
>  !-----------------------------------------------------------------------
>  
>  method=ESMF_REGRIDMETHOD_NEAREST_STOD
> 
>  isrctermprocessing = 1
>  
>  mask_input_ptr = 0
>  where (nint(landmask_input_ptr) == 1) mask_input_ptr = 1
> 
>  mask_target_ptr = 0
>  where (landmask_target_ptr == 1) mask_target_ptr = 1
>  
>  print*,"- CALL FieldCreate FOR TERRAIN FROM INPUT GRID LAND."
>  terrain_from_input_grid_land = ESMF_FieldCreate(target_grid, &
>                                            typekind=ESMF_TYPEKIND_R8, &
>                                            staggerloc=ESMF_STAGGERLOC_CENTER, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldCreate", rc)
>  
>  print*,"- CALL FieldRegridStore for land fields."
>  call ESMF_FieldRegridStore(terrain_input_grid, &
>                             terrain_from_input_grid_land, &
>                             srcmaskvalues=(/0/), &
>                             dstmaskvalues=(/0/), &
>                             polemethod=ESMF_POLEMETHOD_NONE, &
>                             srctermprocessing=isrctermprocessing, &
>                             unmappedaction=ESMF_UNMAPPEDACTION_IGNORE, &
>                             normtype=ESMF_NORMTYPE_FRACAREA, &
>                             routehandle=regrid_all_land, &
>                             regridmethod=method, &
>                             unmappedDstList=unmapped_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldRegridStore", rc)
> 
>  print*,"- CALL Field_Regrid TERRAIN."
>  call ESMF_FieldRegrid(terrain_input_grid, &
>                        terrain_from_input_grid_land, &
>                        routehandle=regrid_all_land, &
>                        termorderflag=ESMF_TERMORDER_SRCSEQ,  rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldRegrid", rc)
>     
>  print*,"- CALL FieldGet FOR terrain from input grid at land."
>  call ESMF_FieldGet(terrain_from_input_grid_land, &
>                     farrayPtr=terrain_from_input_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
>     
>  l = lbound(unmapped_ptr)
>  u = ubound(unmapped_ptr)
> 
>  do ij = l(1), u(1)
>    call ij_to_i_j(unmapped_ptr(ij), i_target, j_target, i, j)
>    terrain_from_input_ptr(i,j) = -9999.9 
>  enddo
>   nullify(terrain_from_input_ptr) 
>   
>  do tile = 1, num_tiles_target_grid
>  
>    print*,"- CALL FieldGather FOR TARGET LANDMASK TILE: ", tile
>    call ESMF_FieldGather(landmask_target_grid, mask_target_one_tile, rootPet=0, tile=tile, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>       
>    print*,"- CALL FieldGather FOR TERRAIN FROM INPUT GRID: ", tile
>    call ESMF_FieldGather(terrain_from_input_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
> 
>    if (localpet == 0) then
>      allocate(land_target_one_tile(i_target,j_target))
>      land_target_one_tile = 0
>      where(mask_target_one_tile == 1) land_target_one_tile = 1
>      call search(data_one_tile, land_target_one_tile, i_target, j_target, tile, 7)
>      deallocate(land_target_one_tile)
>    endif
> 
>    print*,"- CALL FieldScatter FOR TERRAIN FROM INPUT GRID: ", tile
>    call ESMF_FieldScatter(terrain_from_input_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldScatter", rc)
>  enddo
>  
>  if(.not. replace_vgtyp) then
>   
>    do tile = 1, num_tiles_target_grid
>      print*,"-CALL FieldGather VEG TYPE TARGET GRID"
>      call ESMF_FieldGather(veg_type_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldGather", rc)
>   
>      data_one_tile(:,:) = 0
>    enddo
>   
>    print*,"- CALL FieldRegrid VEG TYPE."
>    call ESMF_FieldRegrid(veg_type_input_grid, &
>                          veg_type_target_grid, &
>                          routehandle=regrid_all_land, &
>                          termorderflag=ESMF_TERMORDER_SRCSEQ, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldRegrid", rc)
>    
>    print*,"- CALL FieldGet FOR TARGET grid veg type."
>    call ESMF_FieldGet(veg_type_target_grid, &
>                       farrayPtr=veg_type_target_ptr, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGet", rc)
>         
>    l = lbound(unmapped_ptr)
>    u = ubound(unmapped_ptr)
> 
>    do ij = l(1), u(1)
>      call ij_to_i_j(unmapped_ptr(ij), i_target, j_target, i, j)
>      veg_type_target_ptr(i,j) = -9999.9 
>    enddo
> 
>    do tile = 1, num_tiles_target_grid
>      print*,"- CALL FieldGather FOR TARGET GRID VEG TYPE TILE: ", tile
>      call ESMF_FieldGather(veg_type_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldGather", rc)
> 
>      print*,"- CALL FieldGather FOR TARGET LANDMASK TILE: ", tile
>      call ESMF_FieldGather(landmask_target_grid, mask_target_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldGather", rc)
> 
>      if (localpet == 0) then
>        allocate(land_target_one_tile(i_target,j_target))
>        land_target_one_tile = 0
>        where(mask_target_one_tile == 1) land_target_one_tile = 1
>        call search(data_one_tile, land_target_one_tile, i_target, j_target, tile, 225)
>        deallocate(land_target_one_tile)
>      endif
> 
>      print*,"- CALL FieldScatter FOR TARGET GRID VEG TYPE: ", tile
>      call ESMF_FieldScatter(veg_type_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldScatter", rc)
>    enddo
>    nullify(veg_type_target_ptr) 
>  endif
>  print*,"- CALL FieldRegridRelease."
>  call ESMF_FieldRegridRelease(routehandle=regrid_all_land, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldRegridRelease", rc)
>     
> !-----------------------------------------------------------------------
> ! Next, determine the sea ice fraction on target grid.  
> ! Interpolate.
> !-----------------------------------------------------------------------
535a725,729
>  mask_input_ptr = 1
>  where (nint(landmask_input_ptr) == 1) mask_input_ptr = 0
>  
>  mask_target_ptr = seamask_target_ptr
>  
578c772
< 
---
>                      
584,588c778,782
< 
<  do tile = 1, num_tiles_target_grid
< 
<    print*,"- CALL FieldGather FOR TARGET GRID SEAICE FRACTION TILE: ", tile
<    call ESMF_FieldGather(seaice_fract_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
---
>  
>  do tile = 1, num_tiles_target_grid  
>    
>     print*,"- CALL FieldGather FOR TARGET GRID SEAICE FRACTION TILE: ", tile
>     call ESMF_FieldGather(seaice_fract_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
592,593c786,787
<   print*,"- CALL FieldGather FOR TARGET GRID SEAICE FRACTION TILE: ", tile
<    call ESMF_FieldGather(seaice_fract_input_grid, data_one_tile_input, rootPet=0, tile=tile, rc=rc)
---
>    print*,"- CALL FieldGather FOR TARGET GRID SEAICE FRACTION TILE: ", tile
>     call ESMF_FieldGather(seaice_fract_input_grid, data_one_tile_input, rootPet=0, tile=tile, rc=rc)
597,602d790
<    print*, "Num input seaice fract not zero = ", count(data_one_tile_input .ne. 0.0)
<    print*, "Num input seaice fract zero = ", count(data_one_tile_input .eq. 0.0)
<    print*, "Num target seaice fract zero = ", count(data_one_tile .eq. 0.0)
<    print*, "Num target seaice fract not zero = ", count(data_one_tile .ne. 0.0)
<    print*, "Num target seaice target missing = ", count(data_one_tile == -9999.9)
< 
623d810
<    
627,631c814,815
<        if (data_one_tile(i,j) > 1.0_esmf_kind_r8) then
<          data_one_tile(i,j) = 1.0_esmf_kind_r8
<        endif
<        if (data_one_tile(i,j) < 0.15_esmf_kind_r8) data_one_tile(i,j) = 0.0_esmf_kind_r8
<        if (data_one_tile(i,j) >= 0.15_esmf_kind_r8) mask_target_one_tile(i,j) = 2
---
>        if (data_one_tile(i,j) < 0.15) data_one_tile(i,j) = 0.0
>        if (data_one_tile(i,j) >= 0.15) mask_target_one_tile(i,j) = 2
647c831
< 
---
>  
675c859,860
< 
---
>  print*, "NUM LANDMASK_TARGET = 2 ", count(landmask_target_ptr == 2)
>   print*, "NUM LANDMASK_INPUT = 2 ", count(landmask_input_ptr == 2)
678c863
< 
---
>  
707c892,893
< 
---
>       
>       
734a921,923
>     
>  print*, "before sea ice regrid, target snow depth min, max = ", minval(snow_depth_target_ptr), &
>  				maxval(snow_depth_target_ptr)
781a971,972
>       
>    if (count(landmask_target_ptr == 2) == 0) data_one_tile(:,:) = 0.0_esmf_kind_r8
787a979
>     
788a981
>       if (count(landmask_target_ptr == 2) == 0) data_one_tile(:,:) =0.0_esmf_kind_r8
791a985,986
>      print*, "after search at sea ice, target sea ice depth min, max = ", minval(data_one_tile), &
>  				maxval(data_one_tile)
803a999
>    
804a1001,1002
>      print*, "before search at sea ice, target snow depth min, max = ", minval(data_one_tile), &
>  				maxval(data_one_tile)
805a1004,1005
>      print*, "after search at sea ice, target snow depth min, max = ", minval(data_one_tile), &
>  				maxval(data_one_tile)
876a1077
> 
901c1102
< 
---
>     
1227c1428
< 
---
>       
1581a1783
> 
1631a1834,1836
>     
>  print*, "before land regrid, target snow depth min, max = ", minval(snow_depth_target_ptr), &
>  				maxval(snow_depth_target_ptr)
1671a1877,1878
>      print*, "after search at land, target snow depth min, max = ", minval(data_one_tile), &
>  				maxval(data_one_tile)
1814a2022
>    allocate (data_one_tile2(i_target,j_target))
1817a2026
>    allocate (data_one_tile2(0,0))
1846a2056,2060
>    
>    print*,"- CALL FieldGather FOR TERRAIN FROM INPUT GRID LAND, TILE: ", tile
>    call ESMF_FieldGather(terrain_from_input_grid_land, data_one_tile2, rootPet=0, tile=tile, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
1849c2063
<      call search(data_one_tile, land_target_one_tile, i_target, j_target, tile, 7)
---
>      call search(data_one_tile, land_target_one_tile, i_target, j_target, tile, 7, terrain_land=data_one_tile2)
1956a2171,2205
>     
>  if (internal_GSD) then
>     print*,"- CALL Field_Regrid for veg greenness over land."
>    call ESMF_FieldRegrid(veg_greenness_input_grid, &
>                veg_greenness_target_grid, &
>                routehandle=regrid_land, &
>                termorderflag=ESMF_TERMORDER_SRCSEQ, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldRegrid", rc)
> 
>     print*,"- CALL Field_Regrid for max veg greenness over land."
>    call ESMF_FieldRegrid(max_veg_greenness_input_grid, &
>                max_veg_greenness_target_grid, &
>                routehandle=regrid_land, &
>                termorderflag=ESMF_TERMORDER_SRCSEQ, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>     call error_handler("IN FieldRegrid", rc)
> 
>    print*,"- CALL Field_Regrid for min veg greenness over land."
>    call ESMF_FieldRegrid(min_veg_greenness_input_grid, &
>                min_veg_greenness_target_grid, &
>                routehandle=regrid_land, &
>                termorderflag=ESMF_TERMORDER_SRCSEQ, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>     call error_handler("IN FieldRegrid", rc)
> 
>     print*,"- CALL Field_Regrid for leaf area index over land."
>    call ESMF_FieldRegrid(lai_input_grid, &
>                lai_target_grid, &
>                routehandle=regrid_land, &
>                termorderflag=ESMF_TERMORDER_SRCSEQ, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>     call error_handler("IN FieldRegrid", rc)
> 
>  endif
1986a2236,2264
>     
>     
>  if (.not. replace_vgfrc .and. internal_GSD) then
>    print*,"- CALL FieldGet FOR TARGET veg greenness."
>    call ESMF_FieldGet(veg_greenness_target_grid, &
>          farrayPtr=veg_greenness_target_ptr, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>          call error_handler("IN FieldGet", rc)
> 
>     print*,"- CALL FieldGet FOR TARGET max veg greenness."
>    call ESMF_FieldGet(max_veg_greenness_target_grid, &
>          farrayPtr=max_veg_greenness_target_ptr, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>          call error_handler("IN FieldGet", rc)
> 
>     print*,"- CALL FieldGet FOR TARGET min veg greenness."
>    call ESMF_FieldGet(min_veg_greenness_target_grid, &
>          farrayPtr=min_veg_greenness_target_ptr, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>          call error_handler("IN FieldGet", rc)
>   endif  
> 
>   if (interp_lai .and. internal_GSD) then
>    print*,"- CALL FieldGet FOR TARGET lai."
>    call ESMF_FieldGet(lai_target_grid, &
>          farrayPtr=lai_target_ptr, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>          call error_handler("IN FieldGet", rc)
>   endif
1993c2271
<    soilm_tot_target_ptr(i,j,:) = -9999.9
---
>    soilm_tot_target_ptr(i,j,:) = -9999.9 
1997c2275,2282
<    soil_type_from_input_ptr(i,j) = -9999.9 
---
>    soil_type_from_input_ptr(i,j) = -9999.9
>    if ( internal_GSD) then 
>      veg_greenness_target_ptr(i,j) = -9999.9  
>      max_veg_greenness_target_ptr(i,j) = -9999.9
>      min_veg_greenness_target_ptr(i,j) = -9999.9
>      lai_target_ptr(i,j) = -9999.9
>    endif
>   
2025a2311,2314
>      
>      !where(data_one_tile < -9999.0) data_one_tile = data_one_tile2
>      print*, "after search and where replace, min max target soil = ", minval(data_one_tile), maxval(data_one_tile)
>    
2051,2067c2340,2358
< 
<    print*,"- CALL FieldGather FOR SOIL TYPE TARGET GRID, TILE: ", tile
<    call ESMF_FieldGather(soil_type_target_grid, data_one_tile2, rootPet=0,tile=tile, rc=rc)
<    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
<       call error_handler("IN FieldGather", rc)
< 
< !---------------------------------------------------------------------------------------
< ! grib2 data does not have soil type.  Set soil type interpolated from input
< ! grid to the target (model) grid soil type.  This turns off the soil moisture
< ! rescaling.
< !---------------------------------------------------------------------------------------
< 
<    if (localpet == 0) then
<      if (trim(input_type) .ne. "grib2") then
<        call search(data_one_tile, mask_target_one_tile, i_target, j_target, tile, 224)
<      else
<        data_one_tile = data_one_tile2
---
>       
>     
> 	 print*,"- CALL FieldGather FOR SOIL TYPE CLIMO TARGET GRID, TILE: ", tile
> 	 call ESMF_FieldGather(soil_type_target_grid, data_one_tile2, rootPet=0, tile=tile, rc=rc)
> 	 if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
> 			call error_handler("IN FieldGather", rc)
> 			
>    if (.not. replace_sotyp) then
>      print*, "maxval soil from input = ", maxval(data_one_tile)
>      if (localpet == 0 .and. maxval(data_one_tile) > 0) then   
>        call search(data_one_tile, mask_target_one_tile, i_target, j_target, tile, 224,soilt_climo=data_one_tile2)
>      endif
>    else
>      if (localpet == 0) then
>        if (maxval(data_one_tile) > 0) then
>          call search(data_one_tile, mask_target_one_tile, i_target, j_target, tile, 224)
>        else
>          data_one_tile = data_one_tile2
>        endif
2069d2359
<    endif
2071c2361,2371
<    print*,"- CALL FieldScatter FOR SOIL TYPE FROM INPUT GRID, TILE: ", tile
---
>    endif
>    
>    
>    if (.not. replace_sotyp) then
>      print*,"- CALL FieldScatter FOR SOIL TYPE FROM INPUT GRID, TILE: ", tile
>      call ESMF_FieldScatter(soil_type_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldScatter", rc)
>    endif
>    
>    print*,"- CALL FieldScatter FOR SOIL TYPE TARGET GRID, TILE: ", tile
2074a2375,2437
>       
>    if (internal_GSD) then
>    
>      print*,"- CALL FieldGather FOR TARGET GRID VEG GREENNESS, TILE: ", tile
>      call ESMF_FieldGather(veg_greenness_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldGather", rc)
> 
>      if (localpet == 0 .and. maxval(data_one_tile) > 0.0) then
>        call search(data_one_tile, mask_target_one_tile, i_target, j_target, tile, 226)
>      endif
>      
>      print*,"- CALL FieldScatter FOR VEG GREENNESS TARGET GRID, TILE: ", tile
>      call ESMF_FieldScatter(veg_greenness_target_grid, data_one_tile, rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>          call error_handler("IN FieldScatter", rc)
> 
>     print*,"- CALL FieldGather FOR TARGET GRID MAX VEG GREENNESS, TILE: ", tile
>      call ESMF_FieldGather(max_veg_greenness_target_grid, data_one_tile, rootPet=0,tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>         call error_handler("IN FieldGather", rc)
> 
>      if (localpet == 0 .and. maxval(data_one_tile) > 0.0) then
>        call search(data_one_tile, mask_target_one_tile, i_target, j_target,tile, 227)
>      endif
> 
>      print*,"- CALL FieldScatter FOR MAX VEG GREENNESS TARGET GRID, TILE: ", tile
>      call ESMF_FieldScatter(max_veg_greenness_target_grid, data_one_tile, rootPet=0,tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>          call error_handler("IN FieldScatter", rc)
> 
>     print*,"- CALL FieldGather FOR TARGET GRID MIN VEG GREENNESS, TILE: ", tile
>      call ESMF_FieldGather(min_veg_greenness_target_grid, data_one_tile,rootPet=0,tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>         call error_handler("IN FieldGather", rc)
> 
>      if (localpet == 0 .and. maxval(data_one_tile) > 0.0) then
>        call search(data_one_tile, mask_target_one_tile, i_target, j_target,tile,228)
>      endif
> 
> 
>      print*,"- CALL FieldScatter FOR MIN VEG GREENNESS TARGET GRID, TILE: ",tile
>      call ESMF_FieldScatter(min_veg_greenness_target_grid, data_one_tile,rootPet=0,tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>          call error_handler("IN FieldScatter", rc)
>      
> 
>      print*,"- CALL FieldGather FOR TARGET GRID LAI, TILE: ", tile
>      call ESMF_FieldGather(lai_target_grid, data_one_tile, rootPet=0,tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>         call error_handler("IN FieldGather", rc)
> 
>      if (localpet == 0 .and. maxval(data_one_tile) > 0.0) then
>        call search(data_one_tile, mask_target_one_tile, i_target, j_target,tile, 229)
>      endif
> 
>      print*,"- CALL FieldScatter FOR VEG GREENNESS TARGET GRID, TILE: ", tile
>      call ESMF_FieldScatter(lai_target_grid, data_one_tile, rootPet=0,tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>          call error_handler("IN FieldScatter", rc)
>   endif
> 
>   deallocate(data_one_tile2)
2110a2474,2480
>   
>    if (tg3_from_soil) then
>      print*,"- CALL FieldScatter FOR TARGET GRID SUBSTRATE TEMPERATURE, TILE: ", tile
>      call ESMF_FieldScatter(substrate_temp_target_grid, data_one_tile_3d(:,:,lsoil_target), rootPet=0, tile=tile, rc=rc)
>      if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>         call error_handler("IN FieldScatter", rc)
>    endif
2121c2491
<  deallocate(data_one_tile, data_one_tile2)
---
>  deallocate(data_one_tile)
2252a2623,3113
> subroutine check_smois_water
> 
> use model_grid, only                 : landmask_target_grid
> 
> use static_data, only                : veg_type_target_grid, veg_greenness_target_grid, &
>                                        soil_type_target_grid, max_veg_greenness_target_grid,&
>                                        min_veg_greenness_target_grid, mxsno_albedo_target_grid, &
>                                        alvsf_target_grid,alvwf_target_grid,&
>                                        alnsf_target_grid,alnwf_target_grid
> 
>   implicit none
> 
>   integer                            :: clb(3), cub(3), i, j, rc
> 
>   integer(esmf_kind_r8), pointer     :: landmask_ptr(:,:)
> 
>   real(esmf_kind_r8), pointer        :: soilm_target_ptr(:,:,:), &
>                                         alvsf_target_ptr(:,:), &
>                                         alnsf_target_ptr(:,:), &
>                                         alvwf_target_ptr(:,:), &
>                                         alnwf_target_ptr(:,:), &
>                                         veg_greenness_target_ptr(:,:), &
>                                         min_veg_greenness_target_ptr(:,:), &
>                                         max_veg_greenness_target_ptr(:,:), &
>                                         canopy_mc_target_ptr(:,:), &
>                                         mxsno_albedo_target_ptr(:,:), &
>                                         soil_type_target_ptr(:,:), &
>                                         veg_type_target_ptr(:,:)
> 
> 
>  print*,"- CALL FieldGet FOR TARGET GRID LAND-SEA MASK."
>  call ESMF_FieldGet(landmask_target_grid, &
>                     farrayPtr=landmask_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR SOIL MOIS TARGET GRID."
>  call ESMF_FieldGet(soilm_tot_target_grid, &
>                     computationalLBound=clb, &
>                     computationalUBound=cub, &
>                     farrayPtr=soilm_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID SOIL TYPE."
>  call ESMF_FieldGet(soil_type_target_grid, &
>                     farrayPtr=soil_type_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID VEG TYPE."
>  call ESMF_FieldGet(veg_type_target_grid, &
>                     farrayPtr=veg_type_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALVSF."
>  call ESMF_FieldGet(alvsf_target_grid, &
>                     farrayPtr=alvsf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALNSF."
>  call ESMF_FieldGet(alnsf_target_grid, &
>                     farrayPtr=alnsf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALVWF."
>  call ESMF_FieldGet(alvwf_target_grid, &
>                     farrayPtr=alvwf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALNWF."
>  call ESMF_FieldGet(alnwf_target_grid, &
>                     farrayPtr=alnwf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID VEG FRAC."
>  call ESMF_FieldGet(veg_greenness_target_grid, &
>                     farrayPtr=veg_greenness_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID MAX VEG FRAC."
>  call ESMF_FieldGet(max_veg_greenness_target_grid, &
>                     farrayPtr=max_veg_greenness_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID MIN VEG FRAC."
>  call ESMF_FieldGet(min_veg_greenness_target_grid, &
>                     farrayPtr=min_veg_greenness_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID CANOPY MC."
>  call ESMF_FieldGet(canopy_mc_target_grid, &
>                     farrayPtr=canopy_mc_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID SNOW ALBEDO."
>  call ESMF_FieldGet(mxsno_albedo_target_grid, &
>                     farrayPtr=mxsno_albedo_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  do i =clb(1),cub(1)
>    do j = clb(2),cub(2)
>      if (landmask_ptr(i,j)==1 .and. soilm_target_ptr(i,j,1) > 0.75) then
>        write(*,'(a,2i5,a,i3,f5.2,2i3)') "CORRECTING G.P.",i,j," FROM LAND TO SEA VALUES; &
>            curr landmask, soilm, stype, vtype = ",landmask_ptr(i,j),&
>            soilm_target_ptr(i,j,1),nint(soil_type_target_ptr(i,j)), &
>            nint(veg_type_target_ptr(i,j))
>        soil_type_target_ptr(i,j) = 0.0
>        veg_type_target_ptr(i,J) = 0.0
>        landmask_ptr(i,j) = 0
>        alvsf_target_ptr(i,j) = 0.06
>        alvwf_target_ptr(i,j) = 0.06
>        alnsf_target_ptr(i,j) = 0.06
>        alnwf_target_ptr(i,j) = 0.06
>        min_veg_greenness_target_ptr(i,j) = 0.0
>        max_veg_greenness_target_ptr(i,j) = 0.0
>        veg_greenness_target_ptr(i,j) = 0.0
>        mxsno_albedo_target_ptr(i,j) = 0.0
>        canopy_mc_target_ptr(i,j) = 0.0
>      endif
>    enddo
>  enddo
> 
> end subroutine check_smois_water
> 
> 
> 
> subroutine check_smois_land
> 
> use model_grid, only                 : landmask_target_grid
> 
> use static_data, only                : veg_type_target_grid, veg_greenness_target_grid, &
>                                        soil_type_target_grid, max_veg_greenness_target_grid,&
>                                        min_veg_greenness_target_grid, mxsno_albedo_target_grid, &
>                                        alvsf_target_grid,alvwf_target_grid,&
>                                        alnsf_target_grid,alnwf_target_grid,&
>                                        facsf_target_grid,facwf_target_grid, &
>                                        slope_type_target_grid
> 
>   implicit none
> 
>   integer                            :: clb(3), cub(3), i, j, rc
> 
>   integer(esmf_kind_r8), pointer     :: landmask_ptr(:,:)
> 
>   real(esmf_kind_r8), pointer        :: soilm_target_ptr(:,:,:), &
>                                         soilt_target_ptr(:,:,:), &
>                                         alvsf_target_ptr(:,:), &
>                                         alnsf_target_ptr(:,:), &
>                                         alvwf_target_ptr(:,:), &
>                                         alnwf_target_ptr(:,:), &
>                                         veg_greenness_target_ptr(:,:), &
>                                         min_veg_greenness_target_ptr(:,:), &
>                                         max_veg_greenness_target_ptr(:,:), &
>                                         canopy_mc_target_ptr(:,:), &
>                                         mxsno_albedo_target_ptr(:,:), &
>                                         soil_type_target_ptr(:,:), &
>                                         veg_type_target_ptr(:,:), &
>                                         facsf_target_ptr(:,:), &
>                                         facwf_target_ptr(:,:), &
>                                         slope_type_target_ptr(:,:)
> 
> 
>  print*,"- CALL FieldGet FOR TARGET GRID LAND-SEA MASK."
>  call ESMF_FieldGet(landmask_target_grid, &
>                     farrayPtr=landmask_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR SOIL MOIS TARGET GRID."
>  call ESMF_FieldGet(soilm_tot_target_grid, &
>                     computationalLBound=clb, &
>                     computationalUBound=cub, &
>                     farrayPtr=soilm_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR SOIL TEMP TARGET GRID."
>  call ESMF_FieldGet(soil_temp_target_grid, &
>                     farrayPtr=soilt_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID SOIL TYPE."
>  call ESMF_FieldGet(soil_type_target_grid, &
>                     farrayPtr=soil_type_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID SOIL TYPE."
>  call ESMF_FieldGet(slope_type_target_grid, &
>                     farrayPtr=slope_type_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID VEG TYPE."
>  call ESMF_FieldGet(veg_type_target_grid, &
>                     farrayPtr=veg_type_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALVSF."
>  call ESMF_FieldGet(alvsf_target_grid, &
>                     farrayPtr=alvsf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALNSF."
>  call ESMF_FieldGet(alnsf_target_grid, &
>                     farrayPtr=alnsf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALVWF."
>  call ESMF_FieldGet(alvwf_target_grid, &
>                     farrayPtr=alvwf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID ALNWF."
>  call ESMF_FieldGet(alnwf_target_grid, &
>                     farrayPtr=alnwf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
> print*,"- CALL FieldGet FOR TARGET GRID FACSF."
>  call ESMF_FieldGet(facsf_target_grid, &
>                     farrayPtr=facsf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID FACWF."
>  call ESMF_FieldGet(facwf_target_grid, &
>                     farrayPtr=facwf_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID VEG FRAC."
>  call ESMF_FieldGet(veg_greenness_target_grid, &
>                     farrayPtr=veg_greenness_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID MAX VEG FRAC."
>  call ESMF_FieldGet(max_veg_greenness_target_grid, &
>                     farrayPtr=max_veg_greenness_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID MIN VEG FRAC."
>  call ESMF_FieldGet(min_veg_greenness_target_grid, &
>                     farrayPtr=min_veg_greenness_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID CANOPY MC."
>  call ESMF_FieldGet(canopy_mc_target_grid, &
>                     farrayPtr=canopy_mc_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  print*,"- CALL FieldGet FOR TARGET GRID SNOW ALBEDO."
>  call ESMF_FieldGet(mxsno_albedo_target_grid, &
>                     farrayPtr=mxsno_albedo_target_ptr, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldGet", rc)
> 
>  do i =clb(1),cub(1)
>    do j = clb(2),cub(2)
>      if (landmask_ptr(i,j)==1 .and. soilm_target_ptr(i,j,1) < 0.001) then !.and. &
>          WRITE(*,'(a,2i5,a,2i3)'), " CORRECTING G.P. ",i,j," PARAMS FROM SEA TO LAND &
>                     VALUES; curr stype,vtype=",  nint(soil_type_target_ptr(i,j)),nint(veg_type_target_ptr(i,j))
>          ! Set values to missing so that search function can then replace 
>          ! them with nearby point values (see replace_land_sfcparams)
>          ! subroutine)
>          soilm_target_ptr(i,j,:) = -99999.9
>          soilt_target_ptr(i,j,:) = -99999.9
> 
>          soil_type_target_ptr(i,j) = -99999.9
>          veg_type_target_ptr(i,J) = -99999.9
> 
>          alvsf_target_ptr(i,j) = -99999.9
>          alvwf_target_ptr(i,j) = -99999.9
>          alnsf_target_ptr(i,j) = -99999.9
>          alnwf_target_ptr(i,j) = -99999.9
>          facsf_target_ptr(i,j) = -99999.9
>          facwf_target_ptr(i,j) = -99999.9
>          min_veg_greenness_target_ptr(i,j) = -99999.9
>          max_veg_greenness_target_ptr(i,j) = -99999.9
>          veg_greenness_target_ptr(i,j) = -99999.9
>          mxsno_albedo_target_ptr(i,j) = -99999.9
>          canopy_mc_target_ptr(i,j) = -99999.9
>          slope_type_target_ptr(i,j) = -99999.9
>      end if
>    enddo
>  enddo
>   !search (field, mask, idim, jdim, tile, field_num, 
>  !call search(soilm_target_ptr(clb(1):cub(1),clb(2):cub(2),
> end subroutine check_smois_land
> 
> 
> 
>  subroutine replace_land_sfcparams(localpet)
> 
>  use search_util
>  use model_grid, only       : lsoil_target, i_target, j_target, &
>                               landmask_target_grid
>  use static_data, only      : soil_type_target_grid, &
>                               alvsf_target_grid, &
>                               alvwf_target_grid, &
>                               alnsf_target_grid, &
>                               alnwf_target_grid, &
>                               facsf_target_grid, &
>                               facwf_target_grid, &
>                               mxsno_albedo_target_grid, &
>                               max_veg_greenness_target_grid, &
>                               min_veg_greenness_target_grid, &
>                               slope_type_target_grid, &
>                               veg_greenness_target_grid, &
>                               veg_type_target_grid
> 
> !i_input, j_input, input_grid
>  implicit none
>  integer, intent(in)                   :: localpet
>  !character(len=1000)      :: msg
>  integer                  :: rc, k_soil
>  integer(esmf_kind_i8)       :: maskdata_one_tile(i_target,j_target)
>  real(esmf_kind_r8)          :: soiltdata_one_tile_3d(i_target,j_target,lsoil_target), &
>                                 soilmdata_one_tile_3d(i_target,j_target,lsoil_target), &
>                                 soiltype_one_tile(i_target,j_target), &
>                                 alvsf_one_tile(i_target,j_target), &
>                                 alvwf_one_tile(i_target,j_target), &
>                                 alnsf_one_tile(i_target,j_target), &
>                                 alnwf_one_tile(i_target,j_target), &
>                                 facsf_one_tile(i_target,j_target), &
>                                 facwf_one_tile(i_target,j_target), &
>                                 mxsno_albedo_one_tile(i_target,j_target), &
>                                 max_veg_greenness_one_tile(i_target,j_target), &
>                                 min_veg_greenness_one_tile(i_target,j_target), &
>                                 slope_type_one_tile(i_target,j_target), &
>                                 veg_greenness_one_tile(i_target,j_target), &
>                                 veg_type_one_tile(i_target,j_target), &
>                                 canopy_mc_one_tile(i_target,j_target), &
>                                 tmp(i_target,j_target)
> 
>  if (localpet==0) PRINT *, "STARTING SUBROUTINE replace_land_sfcparams"
>  call ESMF_FieldGather(landmask_target_grid, maskdata_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
> 
> 
> ! Now get all variables to call search routine for
>  call ESMF_FieldGather(soil_temp_target_grid, soiltdata_one_tile_3d, rootPet=0, tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(soilm_tot_target_grid, soilmdata_one_tile_3d, rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(soil_type_target_grid, soiltype_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(alvsf_target_grid, alvsf_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(alvwf_target_grid, alvwf_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(alnsf_target_grid, alnsf_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(alnwf_target_grid, alnwf_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(facsf_target_grid, facsf_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(facwf_target_grid, facwf_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(mxsno_albedo_target_grid,mxsno_albedo_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(max_veg_greenness_target_grid, max_veg_greenness_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(min_veg_greenness_target_grid, min_veg_greenness_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(slope_type_target_grid, slope_type_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(veg_greenness_target_grid, veg_greenness_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(veg_type_target_grid, veg_type_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>  call ESMF_FieldGather(canopy_mc_target_grid,canopy_mc_one_tile,rootPet=0,tile=1,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>       call error_handler("IN FieldGather", rc)
>  if (localpet == 0) then
>   ! 2d vars
>    call search(soiltype_one_tile,maskdata_one_tile,i_target,j_target,1,224)
>    call search(alvsf_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(alvwf_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(alnsf_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(alnwf_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(facsf_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(facwf_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(mxsno_albedo_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(max_veg_greenness_one_tile,maskdata_one_tile,i_target,j_target,1,226)
>    call search(min_veg_greenness_one_tile,maskdata_one_tile,i_target,j_target,1,226)
>    call search(slope_type_one_tile,maskdata_one_tile,i_target,j_target,1,0)
>    call search(veg_greenness_one_tile,maskdata_one_tile,i_target,j_target,1,226)
>    call search(veg_type_one_tile,maskdata_one_tile,i_target,j_target,1,225)
>    call search(canopy_mc_one_tile,maskdata_one_tile,i_target,j_target,1,223)
>   ! 3d  vars
>     do k_soil = 1, lsoil_target
>      tmp = soiltdata_one_tile_3d(:,:,k_soil)
>      call search(tmp,maskdata_one_tile,i_target,j_target,1,85)
>      soiltdata_one_tile_3d(:,:,k_soil) = tmp
> 
>      tmp = soilmdata_one_tile_3d(:,:,k_soil)
>      call search(tmp,maskdata_one_tile,i_target,j_target,1,86)
>      soilmdata_one_tile_3d(:,:,k_soil) = tmp
>    end do
>  end if ! localpet
> 
> ! scatter data back to procs
>  call ESMF_FieldScatter(soilm_tot_target_grid, soilmdata_one_tile_3d, rootpet=0, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>  call ESMF_FieldScatter(soil_temp_target_grid, soiltdata_one_tile_3d, rootpet=0, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>  call ESMF_FieldScatter(soil_type_target_grid, soiltype_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(alvsf_target_grid, alvsf_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(alvwf_target_grid, alvwf_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(alnsf_target_grid, alnsf_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(alnwf_target_grid, alnwf_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(facsf_target_grid, facsf_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(facwf_target_grid, facwf_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(mxsno_albedo_target_grid, mxsno_albedo_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(max_veg_greenness_target_grid, max_veg_greenness_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(min_veg_greenness_target_grid, min_veg_greenness_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(slope_type_target_grid, slope_type_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(veg_greenness_target_grid, veg_greenness_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(veg_type_target_grid, veg_type_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
>   call ESMF_FieldScatter(canopy_mc_target_grid, canopy_mc_one_tile, rootpet=0,rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)
> 
> 
> end subroutine replace_land_sfcparams
> 
2364,2365c3225,3226
<      DF = LOG(( PSIS*GRAV/HLICE ) * ( ( 1.+CK*SWL )**2. ) *      &
<         ( SMCMAX/(SMC-SWL) )**BX) - LOG(-(TKELV-frz_h2o)/TKELV)
---
>      DF = ALOG(( PSIS*GRAV/HLICE ) * ( ( 1.+CK*SWL )**2. ) *      &
>         ( SMCMAX/(SMC-SWL) )**BX) - ALOG(-(TKELV-frz_h2o)/TKELV)
2500a3362,3364
>  ! If soil type didn't exist in the input data, skip this routine 
>  if (maxval(soil_type_input_ptr) < -999.9_esmf_kind_r8) return
>  
2671a3536,3655
>   
> !---------------------------------------------------------------------------------------------
> ! Adjust soil levels of the input grid if there's a mismatch between input and
> ! target grids.
> !---------------------------------------------------------------------------------------------
>  
>  subroutine adjust_soil_levels(localpet)
>  use model_grid, only       : lsoil_target, i_input, j_input, input_grid
>  use input_data, only       : lsoil_input, soil_temp_input_grid, &
>                               soilm_liq_input_grid, soilm_tot_input_grid
>  implicit none
>  integer, intent(in)                   :: localpet
>  character(len=1000)      :: msg
>  integer                  :: rc
>  real(esmf_kind_r8)          :: tmp(i_input,j_input), &
>                                 data_one_tile(i_input,j_input,lsoil_input), &
>                                 tmp3d(i_input,j_input,lsoil_target)
>  if (lsoil_input == 9 .and. lsoil_target == 4) then
>  
>    call ESMF_FieldGather(soil_temp_input_grid, data_one_tile, rootPet=0, tile=1, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>       
>    call ESMF_FieldDestroy(soil_temp_input_grid,rc=rc)
>    soil_temp_input_grid = ESMF_FieldCreate(input_grid, &
>                          typekind=ESMF_TYPEKIND_R8, &
>                          staggerloc=ESMF_STAGGERLOC_CENTER, &
>                          ungriddedLBound=(/1/), &
>                          ungriddedUBound=(/lsoil_target/), rc=rc)
>                                          
>    if(localpet==0)then
>       tmp3d(:,:,1)= (data_one_tile(:,:,1) + data_one_tile(:,:,2))/2.0 * 0.1 + &
>                                       (data_one_tile(:,:,2) + data_one_tile(:,:,3))/2.0 * 0.3 + &
>                                       (data_one_tile(:,:,3) + data_one_tile(:,:,4))/2.0 * 0.6
>       tmp = (data_one_tile(:,:,6) - data_one_tile(:,:,5)) / 30.0 * 10.0 + data_one_tile(:,:,5) !Linear approx. of 40 cm obs
>       tmp3d(:,:,2)= (data_one_tile(:,:,4) + data_one_tile(:,:,5)) / 2.0 * 0.75 + &
>                                       (data_one_tile(:,:,5) + tmp) / 2.0 * 0.25
>       tmp3d(:,:,3)= (tmp + data_one_tile(:,:,6)) /2.0 * (1.0/3.0) + &
>                                       (data_one_tile(:,:,6) + data_one_tile(:,:,7)) / 2.0 * (2.0/3.0)
>       tmp = (data_one_tile(:,:,9) - data_one_tile(:,:,9)) / 140.0 * 40.0 + data_one_tile(:,:,8) !Linear approx of 200 cm obs
>       tmp3d(:,:,4)= (data_one_tile(:,:,7) + data_one_tile(:,:,8)) / 2.0 * 0.6 + &
>                                       (data_one_tile(:,:,8) + tmp) / 2.0 * 0.4
>    endif
>   
>    call ESMF_FieldScatter(soil_temp_input_grid, tmp3d, rootpet=0, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)   
>                                                                               
>    call ESMF_FieldGather(soilm_tot_input_grid, data_one_tile, rootPet=0, tile=1, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>       
>    call ESMF_FieldDestroy(soilm_tot_input_grid,rc=rc)
>    soilm_tot_input_grid = ESMF_FieldCreate(input_grid, &
>                          typekind=ESMF_TYPEKIND_R8, &
>                          staggerloc=ESMF_STAGGERLOC_CENTER, &
>                          ungriddedLBound=(/1/), &
>                          ungriddedUBound=(/lsoil_target/), rc=rc)
>                                          
>   if(localpet==0) then
>       tmp3d(:,:,1)= (data_one_tile(:,:,1) + data_one_tile(:,:,2))/2.0 * 0.1 + &
>                                       (data_one_tile(:,:,2) + data_one_tile(:,:,3))/2.0 * 0.3 + &
>                                       (data_one_tile(:,:,3) + data_one_tile(:,:,4))/2.0 * 0.6
>       tmp = (data_one_tile(:,:,6) - data_one_tile(:,:,5)) / 30.0 * 10.0 + data_one_tile(:,:,5) !Linear approx. of 40 cm obs
>       tmp3d(:,:,2)= (data_one_tile(:,:,4) + data_one_tile(:,:,5)) / 2.0 * 0.75 + &
>                                       (data_one_tile(:,:,5) + tmp) / 2.0 * 0.25
>       tmp3d(:,:,3)= (tmp + data_one_tile(:,:,6)) /2.0 * (1.0/3.0) + &
>                                       (data_one_tile(:,:,6) + data_one_tile(:,:,7)) / 2.0 * (2.0/3.0)
>       tmp = (data_one_tile(:,:,9) - data_one_tile(:,:,9)) / 140.0 * 40.0 + data_one_tile(:,:,8) !Linear approx of 200 cm obs
>       tmp3d(:,:,4)= (data_one_tile(:,:,7) + data_one_tile(:,:,8)) / 2.0 * 0.6 + &
>                                       (data_one_tile(:,:,8) + tmp) / 2.0 * 0.4
>    endif
>   
>    call ESMF_FieldScatter(soilm_tot_input_grid, tmp3d, rootpet=0, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)   
>   
>    call ESMF_FieldGather(soilm_liq_input_grid, data_one_tile, rootPet=0, tile=1, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>       call error_handler("IN FieldGather", rc)
>       
>    call ESMF_FieldDestroy(soilm_liq_input_grid,rc=rc)
>    soilm_liq_input_grid = ESMF_FieldCreate(input_grid, &
>                          typekind=ESMF_TYPEKIND_R8, &
>                          staggerloc=ESMF_STAGGERLOC_CENTER, &
>                          ungriddedLBound=(/1/), &
>                          ungriddedUBound=(/lsoil_target/), rc=rc)
>   if(localpet==0) then
>       tmp3d(:,:,1)= (data_one_tile(:,:,1) + data_one_tile(:,:,2))/2.0 * 0.1 + &
>                                       (data_one_tile(:,:,2) + data_one_tile(:,:,3))/2.0 * 0.3 + &
>                                       (data_one_tile(:,:,3) + data_one_tile(:,:,4))/2.0 * 0.6
>       tmp = (data_one_tile(:,:,6) - data_one_tile(:,:,5)) / 30.0 * 10.0 + data_one_tile(:,:,5) !Linear approx. of 40 cm obs
>       tmp3d(:,:,2)= (data_one_tile(:,:,4) + data_one_tile(:,:,5)) / 2.0 * 0.75 + &
>                                       (data_one_tile(:,:,5) + tmp) / 2.0 * 0.25
>       tmp3d(:,:,3)= (tmp + data_one_tile(:,:,6)) /2.0 * (1.0/3.0) + &
>                                       (data_one_tile(:,:,6) + data_one_tile(:,:,7)) / 2.0 * (2.0/3.0)
>       tmp = (data_one_tile(:,:,9) - data_one_tile(:,:,9)) / 140.0 * 40.0 + data_one_tile(:,:,8) !Linear approx of 200 cm obs
>       tmp3d(:,:,4)= (data_one_tile(:,:,7) + data_one_tile(:,:,8)) / 2.0 * 0.6 + &
>                                       (data_one_tile(:,:,8) + tmp) / 2.0 * 0.4
>    endif
>   
>    call ESMF_FieldScatter(soilm_liq_input_grid, tmp3d, rootpet=0, rc=rc)
>    if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
>     call error_handler("IN FieldScatter", rc)   
>  
>  elseif (lsoil_input /= lsoil_target) then
>   rc = -1
>   
>   write(msg,'("NUMBER OF SOIL LEVELS IN INPUT (",I2,") and OUPUT &
>                (",I2,") MUST EITHER BE EQUAL OR 9 AND 4, RESPECTIVELY")') &
>                lsoil_input, lsoil_target
> 
>   call error_handler(trim(msg), rc)
>  endif
>  
>  !! Not sure what the proper method is here, but will need one branch for
>  !! converting from 9 --> 4 levels and another for 4 --> 9 levels. 
>  
>  end subroutine adjust_soil_levels
> 
2765d3748
<  real(esmf_kind_r8), pointer        :: hice_ptr(:,:)
2775c3758,3762
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID SLOPE TYPE."
---
> !---------------------------------------------------------------------------------------------
> ! Set slope type flag value at non-land points.
> !---------------------------------------------------------------------------------------------
> 
>  print*,"- CALL FieldGet FOR TARGET GRID SLOPE TYPE."
2787c3774
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID SOIL TYPE."
---
>  print*,"- CALL FieldGet FOR TARGET GRID SOIL TYPE."
2799c3786
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID VEGETATION TYPE."
---
>  print*,"- CALL FieldGet FOR TARGET GRID VEGETATION TYPE."
2811c3798
<  print*,"- SET TARGET GRID ALVSF AT NON-LAND."
---
>  print*,"- CALL FieldGet FOR TARGET GRID ALVSF."
2823c3810
<  print*,"- SET TARGET GRID ALVWF AT NON-LAND."
---
>  print*,"- CALL FieldGet FOR TARGET GRID ALVWF."
2835c3822
<  print*,"- SET TARGET GRID ALNSF AT NON-LAND."
---
>  print*,"- CALL FieldGet FOR TARGET GRID ALNSF."
2847c3834
<  print*,"- SET TARGET GRID ALNWF AT NON-LAND."
---
>  print*,"- CALL FieldGet FOR TARGET GRID ALNWF."
2859c3846
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID FACSF."
---
>  print*,"- CALL FieldGet FOR TARGET GRID FACSF."
2871c3858
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID FACSF."
---
>  print*,"- CALL FieldGet FOR TARGET GRID FAWSF."
2883c3870
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID MAXIMUM GREENNESS."
---
>  print*,"- CALL FieldGet FOR TARGET GRID MAXIMUM GREENNESS."
2895c3882
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID MINIMUM GREENNESS."
---
>  print*,"- CALL FieldGet FOR TARGET GRID MINIMUM GREENNESS."
2907c3894
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID VEGETATION GREENNESS."
---
>  print*,"- CALL FieldGet FOR TARGET GRID VEGETATION GREENNESS."
2919c3906
<  print*,"- SET NON-LAND FLAG FOR TARGET GRID MAX SNOW ALBEDO."
---
>  print*,"- CALL FieldGet FOR TARGET GRID MAX SNOW ALBEDO."
2931c3918
<  print*,"- ZERO OUT TARGET GRID CANOPY MOISTURE CONTENT WHERE NO PLANTS."
---
>  print*,"- CALL FieldGet FOR TARGET GRID CANOPY MOISTURE CONTENT."
2949c3936
<  print*,"- SET TARGET GRID SKIN TEMP AT ICE POINTS."
---
>  print*,"- CALL FieldGet FOR TARGET GRID SKIN TEMP."
2961,2966d3947
<  print*,"- SET TARGET GRID SEA ICE DEPTH TO ZERO AT NON-ICE POINTS."
<  call ESMF_FieldGet(seaice_depth_target_grid, &
<                     farrayPtr=hice_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
2974d3954
<      hice_ptr(i,j) = 0.0
2979c3959
<  print*,"- SET TARGET GRID SUBSTRATE TEMP AT ICE."
---
>  print*,"- CALL FieldGet FOR TARGET GRID SUBSTRATE TEMP."
2995,3023c3975
<  print*,"- ZERO OUT TARGET GRID SNOW DEPTH AT OPEN WATER."
<  call ESMF_FieldGet(snow_depth_target_grid, &
<                     farrayPtr=data_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  do j = clb(2), cub(2)
<  do i = clb(1), cub(1)
<    if (landmask_ptr(i,j) == 0) then  ! open water
<      data_ptr(i,j) = 0.0
<    end if
<  enddo
<  enddo
< 
<  print*,"- ZERO OUT TARGET GRID SNOW LIQ AT OPEN WATER."
<  call ESMF_FieldGet(snow_liq_equiv_target_grid, &
<                     farrayPtr=data_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  do j = clb(2), cub(2)
<  do i = clb(1), cub(1)
<    if (landmask_ptr(i,j) == 0) then  ! open water
<      data_ptr(i,j) = 0.0
<    endif
<  enddo
<  enddo
< 
<  print*,"- SET NON-LAND FLAG VALUE FOR TARGET GRID TOTAL SOIL MOISTURE."
---
>  print*,"- CALL FieldGet FOR TARGET GRID TOTAL SOIL MOISTURE."
3029c3981
<  print*,"- SET NON-LAND FLAG VALUE FOR  TARGET GRID LIQUID SOIL MOISTURE."
---
>  print*,"- CALL FieldGet FOR TARGET GRID LIQUID SOIL MOISTURE."
3037,3038c3989,3990
<    if (landmask_ptr(i,j) == 2 .or. landmask_ptr(i,j) == 0 .or. &
<        nint(veg_type_ptr(i,j)) == veg_type_landice_target) then
---
>   if (landmask_ptr(i,j) == 2 .or. landmask_ptr(i,j) == 0) then !.or. &
>        !nint(veg_type_ptr(i,j)) == veg_type_landice_target) then
3045c3997
<  print*,"- SET OPEN WATER FLAG FOR TARGET GRID SOIL TEMPERATURE."
---
>  print*,"- CALL FieldGet FOR TARGET GRID SOIL TEMPERATURE."
3280,3283c4232
<  integer                        :: rc
< 
<  real(esmf_kind_r8), pointer    :: target_ptr(:,:), target_ptr_3d(:,:,:)
<  real                           :: init_val = -999.9
---
>  integer                     :: rc
3292,3299d4240
<  print*,"- INITIALIZE TARGET grid t2m."
<  call ESMF_FieldGet(t2m_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3307,3314d4247
<  print*,"- INITIALIZE TARGET grid q2m."
<  call ESMF_FieldGet(q2m_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3322,3329d4254
<  print*,"- INITIALIZE TARGET grid tprcp."
<  call ESMF_FieldGet(tprcp_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3337,3344d4261
<  print*,"- INITIALIZE TARGET grid f10m."
<  call ESMF_FieldGet(f10m_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3352,3359d4268
<  print*,"- INITIALIZE TARGET grid ffmm."
<  call ESMF_FieldGet(ffmm_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3367,3374d4275
<  print*,"- INITIALIZE TARGET grid ustar."
<  call ESMF_FieldGet(ustar_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3382,3389d4282
<  print*,"- INITIALIZE TARGET grid snow liq equiv."
<  call ESMF_FieldGet(snow_liq_equiv_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3397,3404d4289
<  print*,"- INITIALIZE TARGET grid snow depth."
<  call ESMF_FieldGet(snow_depth_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3412,3419d4296
<  print*,"- INITIALIZE TARGET grid sea ice fraction."
<  call ESMF_FieldGet(seaice_fract_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3427,3434d4303
<  print*,"- INITIALIZE TARGET sea ice depth."
<  call ESMF_FieldGet(seaice_depth_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3442,3449d4310
<  print*,"- INITIALIZE TARGET sea ice skin temp."
<  call ESMF_FieldGet(seaice_skin_temp_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3457,3464d4317
<  print*,"- INITIALIZE TARGET srflag."
<  call ESMF_FieldGet(srflag_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3472,3479d4324
<  print*,"- INITIALIZE TARGET grid skin temp."
<  call ESMF_FieldGet(skin_temp_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3487,3494d4331
<  print*,"- INITIALIZE TARGET grid canopy moisture."
<  call ESMF_FieldGet(canopy_mc_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3502,3509d4338
<  print*,"- INITIALIZE TARGET grid z0."
<  call ESMF_FieldGet(z0_target_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3517,3524d4345
<  print*,"- INITIALIZE TARGET grid interpolated terrain."
<  call ESMF_FieldGet(terrain_from_input_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
< 
3532,3538c4353,4358
<  print*,"- INITIALIZE TARGET grid soil type"
<  call ESMF_FieldGet(soil_type_from_input_grid, &
<                     farrayPtr=target_ptr, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr = init_val
---
>   print*,"- CALL FieldCreate FOR INTERPOLATED TARGET GRID LEAF AREA INDEX."
>   lai_target_grid = ESMF_FieldCreate(target_grid, &
>                                      typekind=ESMF_TYPEKIND_R8, &
>                                      staggerloc=ESMF_STAGGERLOC_CENTER, rc=rc)
>  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__))&
>     call error_handler("IN FieldCreate", rc)
3549,3556d4368
<  print*,"- INITIALIZE TARGET grid soil temp"
<  call ESMF_FieldGet(soil_temp_target_grid, &
<                     farrayPtr=target_ptr_3d, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr_3d = init_val
< 
3566,3573d4377
<  print*,"- INITIALIZE TARGET grid soil moist"
<  call ESMF_FieldGet(soilm_tot_target_grid, &
<                     farrayPtr=target_ptr_3d, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr_3d = init_val
< 
3582,3589d4385
< 
<  print*,"- INITIALIZE TARGET grid soil liq"
<  call ESMF_FieldGet(soilm_liq_target_grid, &
<                     farrayPtr=target_ptr_3d, rc=rc)
<  if(ESMF_logFoundError(rcToCheck=rc,msg=ESMF_LOGERR_PASSTHRU,line=__LINE__,file=__FILE__)) &
<     call error_handler("IN FieldGet", rc)
< 
<  target_ptr_3d = init_val
